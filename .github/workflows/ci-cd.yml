# .github/workflows/ci-cd.yml
# 빌드와 테스트를 처리하는 워크플로우
# .github/workflows/ci-cd.yml
name: CI/CD using github actions and docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      db:
        image: mariadb:latest
        ports:
          - 3306:3306
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
          MARIADB_DATABASE: ${{ secrets.MYSQL_DB_NAME }}
          MARIADB_USER: ${{ secrets.MYSQL_DB_USER }}
          MARIADB_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
        options: --memory=1g  # 메모리 사용량 제한

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Add swap space
      run: |
        sudo dd if=/dev/zero of=/swapfile bs=1M count=8192
        sudo mkswap /swapfile
        sudo swapon /swapfile
        sudo swapon --show
        free -h

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Create .env file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env
        echo "MARIADB_ROOT_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD }}" >> .env
        echo "MARIADB_DATABASE=${{ secrets.MYSQL_DB_NAME }}" >> .env
        echo "MARIADB_USER=${{ secrets.MYSQL_DB_USER }}" >> .env
        echo "MARIADB_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD }}" >> .env
        echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env
        echo "MYSQL_DB_HOST=${{ secrets.MYSQL_DB_HOST }}" >> .env
        echo "MYSQL_DB_PORT=${{ secrets.MYSQL_DB_PORT }}" >> .env
        echo "MYSQL_DB_USER=${{ secrets.MYSQL_DB_USER }}" >> .env
        echo "MYSQL_DB_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD }}" >> .env
        echo "MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}" >> .env
        echo "SOCIAL_AUTH_GOOGLE_CLIENT_ID=${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}" >> .env
        echo "SOCIAL_AUTH_GOOGLE_SECRET=${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}" >> .env
        echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
        echo "STATE=${{ secrets.STATE }}" >> .env
        echo "SOCIAL_AUTH_NAVER_CLIENT_ID=${{ secrets.SOCIAL_AUTH_NAVER_CLIENT_ID }}" >> .env
        echo "SOCIAL_AUTH_NAVER_SECRET=${{ secrets.SOCIAL_AUTH_NAVER_SECRET }}" >> .env
        echo "NAVER_CALLBACK_URL=${{ secrets.NAVER_CALLBACK_URL }}" >> .env
        echo "SOCIAL_AUTH_KAKAO_CLIENT_ID=${{ secrets.SOCIAL_AUTH_KAKAO_CLIENT_ID }}" >> .env
        echo "SOCIAL_AUTH_KAKAO_SECRET=${{ secrets.SOCIAL_AUTH_KAKAO_SECRET }}" >> .env
        echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
        echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env

    - name: Build and run Docker Compose
      run: |
        docker-compose up --build -d
        
    - name: Wait for db to be ready
      run: |
        docker-compose exec -T web /wait-for-it.sh db:3306 -- echo "Database is up"

    - name: Sleep for 20 seconds to ensure db is ready
      run: sleep 20

    - name: Check db container logs
      run: |
        docker-compose logs db
    
    - name: Drop and recreate database
      run: |
        docker-compose run db mariadb -u${{ secrets.MYSQL_DB_USER }} -h db -p${{ secrets.MYSQL_DB_PASSWORD }} -e "DROP DATABASE IF EXISTS \`${{ secrets.MYSQL_DB_NAME }}\`; CREATE DATABASE \`${{ secrets.MYSQL_DB_NAME }}\`;"

    - name: Clear migrations
      run: |
        find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
        find . -path "*/migrations/*.pyc" -delete

    - name: Make migrations
      run: |
        docker-compose run web python manage.py makemigrations

    - name: Run migrations
      run: |
        docker-compose run web python manage.py migrate

    - name: Run tests
      run: |
        docker-compose run web python manage.py test

    - name: Stop and remove Docker Compose containers
      run: |
        docker-compose down
